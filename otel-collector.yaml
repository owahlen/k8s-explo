# ----------------------------
# ConfigMap with Collector config
# ----------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: monitoring
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          http:
            endpoint: 0.0.0.0:4318
          grpc:
            endpoint: 0.0.0.0:4317

    processors:
      k8sattributes:
        auth_type: serviceAccount
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.node.name

      # ---- Canonicalize HTTP metric names/labels (Node & Spring) ----
      transform:
        error_mode: ignore
        metric_statements:
          # 1) Metric name canonicalization
          - context: metric
            statements:
              # Node (legacy -> canonical)
              - set(name, "http.server.request.duration") where name == "http.request.duration"
              - set(name, "http.server.request.duration") where name == "http.server.duration"
              - set(name, "http.client.request.duration") where name == "http.client.duration"

              # Spring Micrometer (built-in names -> canonical)
              - set(name, "http.server.request.duration") where name == "http.server.requests"
              - set(name, "http.client.request.duration") where name == "http.client.requests"

          # 2) Label normalization (add canonical keys; keep legacy ones too)
          - context: datapoint
            statements:
              # --- Server ---
              # route
              - set(attributes["http.route"], attributes["uri"]) where name == "http.server.request.duration" and attributes["http.route"] == nil and attributes["uri"] != nil
              # method
              - set(attributes["http.request.method"], attributes["method"]) where name == "http.server.request.duration" and attributes["http.request.method"] == nil and attributes["method"] != nil
              # status code
              - set(attributes["http.response.status_code"], attributes["status"]) where name == "http.server.request.duration" and attributes["http.response.status_code"] == nil and attributes["status"] != nil
              # keep dashboards happy: also copy canonical -> legacy if legacy missing
              - set(attributes["uri"], attributes["http.route"]) where name == "http.server.request.duration" and attributes["uri"] == nil and attributes["http.route"] != nil

              # --- Client ---
              - set(attributes["http.route"], attributes["uri"]) where name == "http.client.request.duration" and attributes["http.route"] == nil and attributes["uri"] != nil
              - set(attributes["http.request.method"], attributes["method"]) where name == "http.client.request.duration" and attributes["http.request.method"] == nil and attributes["method"] != nil
              - set(attributes["http.response.status_code"], attributes["status"]) where name == "http.client.request.duration" and attributes["http.response.status_code"] == nil and attributes["status"] != nil
              - set(attributes["uri"], attributes["http.route"]) where name == "http.client.request.duration" and attributes["uri"] == nil and attributes["http.route"] != nil

          # NOTE:
          # - We intentionally do NOT rescale units here.
          #   If Spring exports milliseconds, Prom will show *_milliseconds_* even after renaming.
          #   Switch Spring to seconds (SLOs/min/max in seconds) so unit becomes 's'
          #   and Prom exposes *_seconds_* alongside Node.

    exporters:
      prometheus:
        endpoint: 0.0.0.0:9464
        resource_to_telemetry_conversion:
          enabled: true # makes resource attrs become labels

    service:
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [k8sattributes, transform]
          exporters: [prometheus]

---
# ----------------------------
# RBAC for k8sattributes
# ----------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: monitoring

---
# ----------------------------
# Deployment
# ----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector
      containers:
        - name: otelcol
          image: otel/opentelemetry-collector-contrib:latest
          args: ["--config=/conf/otel-collector-config.yaml"]
          ports:
            - containerPort: 4317 # gRPC OTLP
            - containerPort: 4318 # HTTP OTLP
            - containerPort: 9464 # Prometheus exporter
          volumeMounts:
            - name: conf
              mountPath: /conf
      volumes:
        - name: conf
          configMap:
            name: otel-collector-conf
            items:
              - key: otel-collector-config.yaml
                path: otel-collector-config.yaml

---
# ----------------------------
# Service for OTLP + Prometheus exporter
# ----------------------------
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: otlp-http
      port: 4318
      targetPort: 4318
    - name: prom-export
      port: 9464
      targetPort: 9464

---
# ----------------------------
# ServiceMonitor for Prometheus
# ----------------------------
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    release: monitoring
spec:
  selector:
    matchLabels:
      app: otel-collector
  endpoints:
    - port: prom-export
      path: /metrics
