apiVersion: v1
kind: Service
metadata:
  name: forward-db
  namespace: default
  labels:
    app: forward-db
spec:
  selector:
    app: forward-db
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
    - name: metrics
      port: 9187
      targetPort: 9187
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: default
type: Opaque
data:
  # "postgres" in base64 (password for user 'app')
  POSTGRES_PASSWORD: cG9zdGdyZXM=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: forward-db
  namespace: default
  labels:
    app: forward-db
spec:
  serviceName: forward-db
  replicas: 1
  selector:
    matchLabels:
      app: forward-db
  template:
    metadata:
      labels:
        app: forward-db
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: postgres
          image: postgres:16
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          # Enable latency sources
          args:
            - -c
            - shared_preload_libraries=pg_stat_statements
            - -c
            - pg_stat_statements.track=top
            - -c
            - track_io_timing=on
          env:
            - name: POSTGRES_DB
              value: forwarddb
            - name: POSTGRES_USER
              value: app
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
          # Ensure pg_stat_statements extension exists
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -lc
                  - |
                    set -e
                    echo "[postStart] Ensuring pg_stat_statements is installed in ${POSTGRES_DB}..."
                    for i in $(seq 1 60); do
                      if PGPASSWORD="$POSTGRES_PASSWORD" psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"; then
                        echo "[postStart] pg_stat_statements present."; exit 0
                      fi
                      echo "[postStart] DB not ready yet, retrying ($i/60)..."; sleep 2
                    done
                    echo "[postStart] Failed to ensure pg_stat_statements after retries." >&2
                    exit 1

          startupProbe:
            exec:
              command: ["pg_isready", "-U", "app", "-d", "forwarddb", "-h", "127.0.0.1"]
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "app", "-d", "forwarddb", "-h", "127.0.0.1"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "app", "-d", "forwarddb", "-h", "127.0.0.1"]
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "2"
              memory: "1Gi"

        # --- postgres_exporter sidecar ---
        - name: postgres-exporter
          image: quay.io/prometheuscommunity/postgres-exporter:v0.18.1
          imagePullPolicy: IfNotPresent
          args:
            - --collector.stat_statements
            - --collector.postmaster
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          env:
            - name: DATA_SOURCE_URI
              value: 127.0.0.1:5432/forwarddb?sslmode=disable
            - name: DATA_SOURCE_USER
              value: app
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            # optional: drop high-cardinality settings metrics
            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
              value: "false"
          ports:
            - name: metrics
              containerPort: 9187
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "250m"
              memory: "128Mi"

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
# Prometheus Operator will scrape the 'metrics' port on the Service above
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: forward-db
  namespace: monitoring
  labels:
    release: monitoring
spec:
  selector:
    matchLabels:
      app: forward-db
  endpoints:
    - port: metrics
      interval: 15s
      scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
      - default
